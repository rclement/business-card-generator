name: CI/CD

on: [push]

env:
  BASE_URL_PREVIEW: bcardgen.vercel.app
  BASE_URL_PRODUCTION: business-card-generator.vercel.app

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Install dependencies
        run: uv sync --all-extras --dev
      - name: Run QA
        run: |
          uv run inv qa
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: .coverage
          include-hidden-files: true

  coverage:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ !cancelled() }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
    env:
      CODECOV_MD_FILE: "coverage.md"
      CODECOV_REPORT_TITLE: "Code coverage report"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Install dependencies
        run: uv sync --all-extras --dev
      - uses: actions/download-artifact@v4
        with:
          name: coverage
      - name: Generate Markdown code coverage report
        run: |
          echo "# ${CODECOV_REPORT_TITLE}" >> "${CODECOV_MD_FILE}"
          uv run coverage report --show-missing --format=markdown >> "${CODECOV_MD_FILE}"
      - name: Compute diff coverage with target branch
        if: ${{ github.event_name == 'pull_request' }}
        env:
          TARGET_BRANCH: origin/${{ github.event.pull_request.base.ref }}
          DIFFCOV_MD_FILE: "diff-coverage.md"
        run: |
          uv run coverage xml
          uv run --with diff_cover diff-cover --compare-branch ${TARGET_BRANCH} --diff-range-notation '..' --ignore-staged --ignore-unstaged --markdown-report "${DIFFCOV_MD_FILE}" coverage.xml
          cat "${DIFFCOV_MD_FILE}" >> "${CODECOV_MD_FILE}"
      - name: Export code coverage report to job summary
        run: cat "${CODECOV_MD_FILE}" >> "${GITHUB_STEP_SUMMARY}"
      - name: Add or update code coverage comment to pull request
        uses: actions/github-script@v7
        if: ${{ github.event_name == 'pull_request' }}
        with:
          script: |
            const fs = require('fs')

            const body = fs.readFileSync(`${process.env.CODECOV_MD_FILE}`, 'utf-8')

            const comments = await github.paginate(
              github.rest.issues.listComments,
              {
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
              }
            )
            const matches = comments.filter(
              comment => comment.body && comment.body.includes(`${process.env.CODECOV_REPORT_TITLE}`)
            )
            const comment = matches[0]

            if (comment) {
              const commentId = comment.id.toString()
              console.log(`updating existing comment comment_id=${commentId}`)
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: commentId,
                body: body,
              })
            } else {
              console.log('adding new comment')
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body,
              })
            }
      - name: Check code coverage constraint
        run: uv run coverage report --fail-under=100

  deploy-vercel-setup:
    name: Deployment setup
    runs-on: ubuntu-latest
    needs: test

    outputs:
      github_ref_slug: ${{ steps.output_step.outputs.github_ref_slug }}
      deployment_url: ${{ steps.output_step.outputs.deployment_url }}

    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v5
      - name: Set preview deployment url variable
        if: ${{ !contains(github.ref, 'tags') }}
        run: echo "DEPLOYMENT_URL=https://${GITHUB_REF_SLUG_URL}-${BASE_URL_PREVIEW}" >> $GITHUB_ENV
      - name: Set production deployment url variable
        if: ${{ contains(github.ref, 'tags') }}
        run: echo "DEPLOYMENT_URL=https://${BASE_URL_PRODUCTION}" >> $GITHUB_ENV
      - id: output_step
        run: |
          echo "github_ref_slug=${GITHUB_REF_SLUG_URL}" >> $GITHUB_OUTPUT
          echo "deployment_url=${DEPLOYMENT_URL}" >> $GITHUB_OUTPUT

  deploy-vercel-preview:
    name: Vercel preview deployment
    runs-on: ubuntu-latest
    needs: deploy-vercel-setup
    if: ${{ !contains(github.ref, 'tags') }}
    environment:
      name: preview/${{ needs.deploy-vercel-setup.outputs.github_ref_slug }}
      url: ${{ needs.deploy-vercel-setup.outputs.deployment_url }}

    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Generate requirements.txt
        run: uv export --locked --no-emit-project --no-default-groups --no-hashes --format requirements.txt > requirements.txt
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v5
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Deploy to Vercel
        run: |
          VERCEL_ALIAS=${GITHUB_REF_SLUG_URL}-${BASE_URL_PREVIEW}
          VERCEL_URL=$(vercel deploy --yes --token $VERCEL_TOKEN)
          vercel alias --token $VERCEL_TOKEN set $VERCEL_URL $VERCEL_ALIAS

  deploy-vercel-production:
    name: Vercel production deployment
    runs-on: ubuntu-latest
    needs: deploy-vercel-setup
    if: contains(github.ref, 'tags')

    environment:
      name: production
      url: ${{ needs.deploy-vercel-setup.outputs.deployment_url }}

    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Generate requirements.txt
        run: uv export --locked --no-emit-project --no-default-groups --no-hashes --format requirements.txt > requirements.txt
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Deploy to Vercel
        run: |
          vercel deploy --yes --token $VERCEL_TOKEN --prod
